{
  "version": 3,
  "sources": ["../../@mui/material/styles/cssUtils.js"],
  "sourcesContent": ["export function isUnitless(value) {\n  return String(parseFloat(value)).length === String(value).length;\n}\n\n// Ported from Compass\n// https://github.com/Compass/compass/blob/master/core/stylesheets/compass/typography/_units.scss\n// Emulate the sass function \"unit\"\nexport function getUnit(input) {\n  return String(input).match(/[\\d.\\-+]*\\s*(.*)/)[1] || '';\n}\n\n// Emulate the sass function \"unitless\"\nexport function toUnitless(length) {\n  return parseFloat(length);\n}\n\n// Convert any CSS <length> or <percentage> value to any another.\n// From https://github.com/KyleAMathews/convert-css-length\nexport function convertLength(baseFontSize) {\n  return (length, toUnit) => {\n    const fromUnit = getUnit(length);\n\n    // Optimize for cases where `from` and `to` units are accidentally the same.\n    if (fromUnit === toUnit) {\n      return length;\n    }\n\n    // Convert input length to pixels.\n    let pxLength = toUnitless(length);\n    if (fromUnit !== 'px') {\n      if (fromUnit === 'em') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      } else if (fromUnit === 'rem') {\n        pxLength = toUnitless(length) * toUnitless(baseFontSize);\n      }\n    }\n\n    // Convert length in pixels to the output unit\n    let outputLength = pxLength;\n    if (toUnit !== 'px') {\n      if (toUnit === 'em') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else if (toUnit === 'rem') {\n        outputLength = pxLength / toUnitless(baseFontSize);\n      } else {\n        return length;\n      }\n    }\n    return parseFloat(outputLength.toFixed(5)) + toUnit;\n  };\n}\nexport function alignProperty({\n  size,\n  grid\n}) {\n  const sizeBelow = size - size % grid;\n  const sizeAbove = sizeBelow + grid;\n  return size - sizeBelow < sizeAbove - size ? sizeBelow : sizeAbove;\n}\n\n// fontGrid finds a minimal grid (in rem) for the fontSize values so that the\n// lineHeight falls under a x pixels grid, 4px in the case of Material Design,\n// without changing the relative line height\nexport function fontGrid({\n  lineHeight,\n  pixels,\n  htmlFontSize\n}) {\n  return pixels / (lineHeight * htmlFontSize);\n}\n\n/**\n * generate a responsive version of a given CSS property\n * @example\n * responsiveProperty({\n *   cssProperty: 'fontSize',\n *   min: 15,\n *   max: 20,\n *   unit: 'px',\n *   breakpoints: [300, 600],\n * })\n *\n * // this returns\n *\n * {\n *   fontSize: '15px',\n *   '@media (min-width:300px)': {\n *     fontSize: '17.5px',\n *   },\n *   '@media (min-width:600px)': {\n *     fontSize: '20px',\n *   },\n * }\n * @param {Object} params\n * @param {string} params.cssProperty - The CSS property to be made responsive\n * @param {number} params.min - The smallest value of the CSS property\n * @param {number} params.max - The largest value of the CSS property\n * @param {string} [params.unit] - The unit to be used for the CSS property\n * @param {Array.number} [params.breakpoints]  - An array of breakpoints\n * @param {number} [params.alignStep] - Round scaled value to fall under this grid\n * @returns {Object} responsive styles for {params.cssProperty}\n */\nexport function responsiveProperty({\n  cssProperty,\n  min,\n  max,\n  unit = 'rem',\n  breakpoints = [600, 900, 1200],\n  transform = null\n}) {\n  const output = {\n    [cssProperty]: `${min}${unit}`\n  };\n  const factor = (max - min) / breakpoints[breakpoints.length - 1];\n  breakpoints.forEach(breakpoint => {\n    let value = min + factor * breakpoint;\n    if (transform !== null) {\n      value = transform(value);\n    }\n    output[`@media (min-width:${breakpoint}px)`] = {\n      [cssProperty]: `${Math.round(value * 10000) / 10000}${unit}`\n    };\n  });\n  return output;\n}"],
  "mappings": ";AAAO,SAAS,WAAW,OAAO;AAChC,SAAO,OAAO,WAAW,KAAK,CAAC,EAAE,WAAW,OAAO,KAAK,EAAE;AAC5D;AAKO,SAAS,QAAQ,OAAO;AAC7B,SAAO,OAAO,KAAK,EAAE,MAAM,kBAAkB,EAAE,CAAC,KAAK;AACvD;AAGO,SAAS,WAAW,QAAQ;AACjC,SAAO,WAAW,MAAM;AAC1B;AAIO,SAAS,cAAc,cAAc;AAC1C,SAAO,CAAC,QAAQ,WAAW;AACzB,UAAM,WAAW,QAAQ,MAAM;AAG/B,QAAI,aAAa,QAAQ;AACvB,aAAO;AAAA,IACT;AAGA,QAAI,WAAW,WAAW,MAAM;AAChC,QAAI,aAAa,MAAM;AACrB,UAAI,aAAa,MAAM;AACrB,mBAAW,WAAW,MAAM,IAAI,WAAW,YAAY;AAAA,MACzD,WAAW,aAAa,OAAO;AAC7B,mBAAW,WAAW,MAAM,IAAI,WAAW,YAAY;AAAA,MACzD;AAAA,IACF;AAGA,QAAI,eAAe;AACnB,QAAI,WAAW,MAAM;AACnB,UAAI,WAAW,MAAM;AACnB,uBAAe,WAAW,WAAW,YAAY;AAAA,MACnD,WAAW,WAAW,OAAO;AAC3B,uBAAe,WAAW,WAAW,YAAY;AAAA,MACnD,OAAO;AACL,eAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO,WAAW,aAAa,QAAQ,CAAC,CAAC,IAAI;AAAA,EAC/C;AACF;AACO,SAAS,cAAc;AAAA,EAC5B;AAAA,EACA;AACF,GAAG;AACD,QAAM,YAAY,OAAO,OAAO;AAChC,QAAM,YAAY,YAAY;AAC9B,SAAO,OAAO,YAAY,YAAY,OAAO,YAAY;AAC3D;AAKO,SAAS,SAAS;AAAA,EACvB;AAAA,EACA;AAAA,EACA;AACF,GAAG;AACD,SAAO,UAAU,aAAa;AAChC;AAiCO,SAAS,mBAAmB;AAAA,EACjC;AAAA,EACA;AAAA,EACA;AAAA,EACA,OAAO;AAAA,EACP,cAAc,CAAC,KAAK,KAAK,IAAI;AAAA,EAC7B,YAAY;AACd,GAAG;AACD,QAAM,SAAS;AAAA,IACb,CAAC,WAAW,GAAG,GAAG,GAAG,GAAG,IAAI;AAAA,EAC9B;AACA,QAAM,UAAU,MAAM,OAAO,YAAY,YAAY,SAAS,CAAC;AAC/D,cAAY,QAAQ,gBAAc;AAChC,QAAI,QAAQ,MAAM,SAAS;AAC3B,QAAI,cAAc,MAAM;AACtB,cAAQ,UAAU,KAAK;AAAA,IACzB;AACA,WAAO,qBAAqB,UAAU,KAAK,IAAI;AAAA,MAC7C,CAAC,WAAW,GAAG,GAAG,KAAK,MAAM,QAAQ,GAAK,IAAI,GAAK,GAAG,IAAI;AAAA,IAC5D;AAAA,EACF,CAAC;AACD,SAAO;AACT;",
  "names": []
}
